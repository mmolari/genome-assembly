import argparse
import yaml
import pathlib
import os
import pandas as pd
from datetime import datetime



def iso_today():
    """Return the current date in format YYYY-MM-DD."""
    return datetime.now().strftime("%Y-%m-%d")

def execute_verbose(command):
    """Executes ad command and prints it in stdout"""
    print(f"executing: {command}")
    os.system(command)


def parse_args():
    parser = argparse.ArgumentParser(
        description="""
    Utility script used to import and set up data from the nccr experiment folder.
    It creates links to basecalled genomes in the correct format for later processing
    with the assembly pipeline.
    """,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        "--samples_yml",
        help="the yaml file containing the list of selected samples to import.",
        required=True,
        type=str,
    )
    parser.add_argument(
        "--runs_fld",
        help="the destination runs folder",
        required=True,
        type=str,
    )
    parser.add_argument(
        "--experiment_fld",
        help="the experiment archive folder, containing one subfolder per experiment.",
        default="/scicore/home/nccr-antiresist/GROUP/unibas/neher/experiments",
        type=str,
    )
    return parser.parse_args()


def create_runs_subfolder(run_fld, run_id):
    """Defines the <date>_<run-id> destination folder. Creates it along with the "reads"
    subfolder, optionally deleting the original if already present."""

    # define rub subdirectory
    main_fld = pathlib.Path(run_fld)
    run_tag = f"{iso_today()}_{run_id}"
    run_fld = main_fld / run_tag / "reads"

    # check if exists, if so possibly remove
    if run_fld.is_dir():
        answ = input(f"Warning: destination folder {run_fld.absolute()} already exists, do you want to remove it? [y/n]")
        if answ in {"Y", "y", "yes"}:
            print(f"removing destination folder: {run_fld.absolute()}")
            execute_verbose(f"rm -r {run_fld.absolute()}")
        else:
            print("terminating")
            exit()
    
    # create directory
    print(f"creating destination folder: {run_fld.absolute()}")
    run_fld.mkdir(parents=True)

    return run_fld
        

def load_selected_samples(yml_file):
    """Loads the run-id and sample dictionary from the input yaml file."""
    with open(yml_file, "r") as f:
        info = yaml.safe_load(f) 
    return info["run-id"], info["samples"]

def sample_source_fld(exp_fld, exp_id, sample_id):
    """Returns the path of the source sample folder and check that the folder exists"""
    src_fld = exp_fld / exp_id / "samples" / sample_id
    assert src_fld.is_dir(), f"sample folder {src_fld.absolute()} does not exist." 
    return src_fld

def import_sample(src_fld, dest_file):
    """Given a sample source folder it parses it and captures all .fastq.gz files
    If only one file is present it creates the destination file as a symlink.
    Otherwise the destination file is generated by concatenating these files."""

    # parse .fastq.gz files in source folder, Check that at least one is present
    src_files = [f for f in src_fld.iterdir() if str(f).endswith(".fastq.gz")]
    assert len(src_files) > 0, f"no .fastq.gz files in {src_fld}"

    if len(src_files) == 1:
        # if only one file then create a symlink 
        src_file = src_files[0]
        execute_verbose(f"ln -s {src_file.absolute()} {dest_file.absolute()}")
    else:
        # otherwise concatenate the files and save them in the destination
        all_files = " ".join([str(f.absolute()) for f in src_files])
        execute_verbose(f"cat {all_files} > {dest_file.absolute()}")

if __name__ == "__main__":

    # parse arguments
    args = parse_args()
    exp_fld = pathlib.Path(args.experiment_fld)
    assert exp_fld.is_dir(), f"Experiment folder {exp_fld.absolute()} is not a directory."

    # import sample info
    run_id, sample_dict = load_selected_samples(args.samples_yml)

    # create destination directory (remove "reads" if already existing)
    runs_fld = create_runs_subfolder(args.runs_fld, run_id)

    # copy all files
    added_samples = []
    for exp_id, samples in sample_dict.items():
        for sample_id in samples:

            # names of source folder and destination file
            sample_src = sample_source_fld(exp_fld, exp_id, sample_id)
            sample_dst_file = runs_fld / f"{exp_id}_{sample_id}.fastq.gz"

            # save .fastq.gz files in the source folder as the destination file (symlink or concatenation)
            import_sample(sample_src, sample_dst_file)

            # save entry in info databasdataframe
            added_samples.append({
                "experiment_id" : exp_id,
                "sample_id" : sample_id,
                "dest_file" : sample_dst_file.absolute(),
                "original_folder" : sample_src.absolute(),
            })

    # save samples info
    sample_info_file = runs_fld.parent / "imported_reads_info.csv"
    pd.DataFrame(added_samples).to_csv(sample_info_file)
    